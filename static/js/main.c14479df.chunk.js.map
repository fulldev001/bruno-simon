{"version":3,"sources":["App.js","index.js"],"names":["Cloud","opacity","speed","width","length","segments","dir","props","group","useRef","texture","useTexture","clouds","useMemo","Array","map","_","index","x","Math","random","y","scale","sin","PI","density","max","rotation","useFrame","state","current","children","forEach","cloud","z","setScalar","clock","getElapsedTime","position","ref","Billboard","lockZ","transparent","depthTest","Clouds","App","camera","intensity","fallback","OrbitControls","minPolarAngle","maxPolarAngle","Sky","azimuth","turbidity","rayleigh","inclination","distance","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAKA,SAASA,EAAT,GAA4G,IAAD,IAA1FC,eAA0F,MAAhF,GAAgF,MAA3EC,aAA2E,MAAnE,GAAmE,MAA9DC,aAA8D,MAAtD,GAAsD,MAAlDC,cAAkD,MAAzC,IAAyC,MAApCC,gBAAoC,MAAzB,GAAyB,MAArBC,WAAqB,MAAf,EAAe,EAATC,EAAS,qEACnGC,EAAQC,mBACRC,EAAUC,YAAW,cACrBC,EAASC,mBACb,kBACE,YAAI,IAAIC,MAAMT,IAAWU,KAAI,SAACC,EAAGC,GAAJ,MAAe,CAC1CC,EAAGf,EAAQ,EAAIgB,KAAKC,SAAWjB,EAC/BkB,EAAGlB,EAAQ,EAAIgB,KAAKC,SAAWjB,EAC/BmB,MAAO,GAAMH,KAAKI,KAAMN,EAAQ,GAAKZ,EAAYc,KAAKK,KAA+B,IAAvB,GAAML,KAAKC,WACzEK,QAASN,KAAKO,IAAI,GAAKP,KAAKC,UAC5BO,SAAUR,KAAKO,IAAI,KAAO,KAAQP,KAAKC,UAAYlB,QAEvD,CAACC,EAAOE,EAAUH,IAQpB,OANA0B,aAAS,SAACC,GAAD,uBACPrB,EAAMsB,eADC,aACP,EAAeC,SAASC,SAAQ,SAACC,EAAOhB,GACtCgB,EAAMN,SAASO,GAAKtB,EAAOK,GAAOU,SAAWrB,EAC7C2B,EAAMX,MAAMa,UAAUvB,EAAOK,GAAOK,OAAW,EAAIH,KAAKI,IAAIM,EAAMO,MAAMC,iBAAmB,KAAO,EAAKpB,EAAS,UAIlH,iDAAWV,GAAX,aACE,uBAAO+B,SAAU,CAAC,EAAG,EAAIjC,EAAW,EAAKD,GAASmC,IAAK/B,EAAvD,SACGI,EAAOG,KAAI,WAA2BE,GAA3B,IAAGC,EAAH,EAAGA,EAAGG,EAAN,EAAMA,EAAGC,EAAT,EAASA,MAAOG,EAAhB,EAAgBA,QAAhB,OACV,cAACe,EAAA,EAAD,CAAuBlB,MAAO,CAACA,EAAOA,EAAOA,GAAQgB,SAAU,CAACpB,EAAGG,GAAIJ,EAAQb,GAASqC,OAAK,EAA7F,SACE,sCAAsB1B,IAAKL,EAASgC,aAAW,EAACzC,QAAUqB,EAAQ,EAAKG,EAAUxB,EAAS0C,WAAW,KADvF1B,WAS1B,SAAS2B,IAEP,OACE,cAAC5C,EAAD,CACE2B,SAAU,CAAC,EAAGR,KAAKK,GAAK,EAAG,GAC3Bc,SAAU,CAAC,EAAG,IAAK,KACnBhB,MAAO,CAAC,GAAI,GAAI,MAKP,SAASuB,IACtB,OACE,eAAC,IAAD,CAAQC,OAAQ,CAAER,SAAU,CAAC,GAAI,GAAI,IAArC,UACE,8BAAcS,UAAW,KACzB,4BAAYA,UAAW,EAAGT,SAAU,CAAC,EAAG,GAAI,OAC5C,cAAC,WAAD,CAAUU,SAAU,KAApB,SACE,cAACJ,EAAD,MAEF,cAACK,EAAA,EAAD,CAAeC,cAAe/B,KAAKK,GAAK,IAAK2B,cAAehC,KAAKK,GAAK,MACtE,cAAC4B,EAAA,EAAD,CAAKC,QAAS,GAAKC,UAAW,GAAIC,SAAU,GAAKC,YAAa,GAAKC,SAAU,SCrDnFC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACf,EAAD,MAEFgB,SAASC,eAAe,W","file":"static/js/main.c14479df.chunk.js","sourcesContent":["import React, { Suspense, useRef, useMemo } from \"react\"\nimport * as THREE from \"three\"\nimport { Canvas, useFrame } from \"react-three-fiber\"\nimport { Billboard, Sky, OrbitControls, useTexture } from \"@react-three/drei\"\n\nfunction Cloud({ opacity = 0.5, speed = 0.4, width = 10, length = 1.5, segments = 30, dir = 1, ...props }) {\n  const group = useRef()\n  const texture = useTexture(\"/cloud.png\")\n  const clouds = useMemo(\n    () =>\n      [...new Array(segments)].map((_, index) => ({\n        x: width / 2 - Math.random() * width,\n        y: width / 2 - Math.random() * width,\n        scale: 0.4 + Math.sin(((index + 1) / segments) * Math.PI) * ((0.2 + Math.random()) * 10),\n        density: Math.max(0.3, Math.random()),\n        rotation: Math.max(0.002, 0.005 * Math.random()) * speed,\n      })),\n    [width, segments, speed],\n  )\n  useFrame((state) =>\n    group.current?.children.forEach((cloud, index) => {\n      cloud.rotation.z += clouds[index].rotation * dir\n      cloud.scale.setScalar(clouds[index].scale + (((1 + Math.sin(state.clock.getElapsedTime() / 10)) / 2) * index) / 10)\n    }),\n  )\n  return (\n    <group {...props}>\n      <group position={[0, 0, (segments / 2) * length]} ref={group}>\n        {clouds.map(({ x, y, scale, density }, index) => (\n          <Billboard key={index} scale={[scale, scale, scale]} position={[x, y, -index * length]} lockZ>\n            <meshStandardMaterial map={texture} transparent opacity={(scale / 6) * density * opacity} depthTest={false} />\n          </Billboard>\n        ))}\n      </group>\n    </group>\n  )\n}\n\nfunction Clouds() {\n  \n  return (\n    <Cloud\n      rotation={[0, Math.PI / 2, 0]}\n      position={[0, 75, -100]}\n      scale={[10, 10, 10]}\n    />\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas camera={{ position: [0, -75, 0] }}>\n      <ambientLight intensity={0.8} />\n      <pointLight intensity={2} position={[0, 0, -1000]} />\n      <Suspense fallback={null}>\n        <Clouds />\n      </Suspense>\n      <OrbitControls minPolarAngle={Math.PI / 1.5} maxPolarAngle={Math.PI / 1.5} />\n      <Sky azimuth={0.5} turbidity={10} rayleigh={0.5} inclination={0.6} distance={100000} />\n    </Canvas>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}